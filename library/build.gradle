apply plugin: 'com.android.library'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.0"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:1.9.5"
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
        return; // Skip debug builds.
    }
    task("javadoc${variant.name.capitalize()}", type: Javadoc) {
        description 'Generates Javadoc for $variant.name.'
        source = variant.javaCompile.source
        ext.androidJar = '${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar'
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
    }

    task("bundleJavadoc${variant.name.capitalize()}", type: Jar) {
        description 'Bundles Javadoc into zip for $variant.name'
        classifier = 'javadoc'
        from tasks["javadoc${variant.name.capitalize()}"]
    }

}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task jar(type: Jar) {
    from 'build/intermediates/classes/release'
    exclude '**/BuildConfig.class'
    exclude '**/R.class'
    exclude 'de/keyboardsurfer/mobile/'
}

task javadocJar(type: Jar, dependsOn: "javadocRelease") {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}